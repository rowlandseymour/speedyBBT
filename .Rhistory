result_matrix <- comparisons_to_matrix(3, comparisons)
result_matrix
expect_equal(result_matrix, expected_matrix)
comparisons <- data.frame("winner" = c(1, 3, 2, 2), "loser" = c(3, 1, 1, 3))
comparisons
win.matrix <- comparisons_to_matrix(3, comparisons)
win.matrix
result_matrix <- comparisons_to_matrix(3, comparisons)
expect_equal(result_matrix, expected_matrix)
# Test case 1: Basic functionality
comparisons <- data.frame("winner" = c(1, 3, 2, 2), "loser" = c(3, 1, 1, 3))
expected_matrix <- matrix(c(0, 1, 1,
0, 0, 0,
1, 1, 0), nrow = 3, byrow = TRUE)
result_matrix <- comparisons_to_matrix(3, comparisons)
expect_equal(result_matrix, expected_matrix)
# Test case 2: No comparisons
comparisons_empty <- data.frame("winner" = numeric(0), "loser" = numeric(0))
expected_matrix_empty <- matrix(0, 3, 3)
result_matrix_empty <- comparisons_to_matrix(3, comparisons_empty)
expect_equal(result_matrix_empty, expected_matrix_empty)
(result_matrix_empty
)
expected_matrix_empty
# Test case 3: Single comparison
comparisons_single <- data.frame("winner" = c(2), "loser" = c(1))
expected_matrix_single <- matrix(c(0, 0, 0,
1, 0, 0,
0, 0, 0), nrow = 3, byrow = TRUE)
result_matrix_single <- comparisons_to_matrix(3, comparisons_single)
expect_equal(result_matrix_single, expected_matrix_single)
# Test case 3: Single comparison
comparisons_single <- data.frame("winner" = c(2), "loser" = c(1))
expected_matrix_single <- matrix(c(0, 1, 0,
0, 0, 0,
0, 0, 0), nrow = 3, byrow = TRUE)
result_matrix_single <- comparisons_to_matrix(3, comparisons_single)
expect_equal(result_matrix_single, expected_matrix_single)
# Test case 4: Multiple objects with no wins
comparisons_no_wins <- data.frame("winner" = c(2, 3), "loser" = c(2, 3))
expected_matrix_no_wins <- matrix(c(0, 0, 0,
1, 0, 0,
0, 1, 0), nrow = 3, byrow = TRUE)
result_matrix_no_wins <- comparisons_to_matrix(3, comparisons_no_wins)
expect_equal(result_matrix_no_wins, expected_matrix_no_wins)
comparisons_no_wins
# Test case 5: Larger matrix
comparisons_large <- data.frame("winner" = c(1, 2, 3, 4, 1, 3), "loser" = c(4, 4, 4, 4, 3, 2))
expected_matrix_large <- matrix(c(0, 0, 1, 1,
0, 0, 0, 1,
0, 1, 0, 1,
0, 0, 0, 0), nrow = 4, byrow = TRUE)
result_matrix_large <- comparisons_to_matrix(4, comparisons_large)
expect_equal(result_matrix_large, expected_matrix_large)
# Test case 5: Larger matrix
comparisons_large <- data.frame("winner" = c(1, 2, 3, 4, 1, 3), "loser" = c(4, 4, 4, 4, 3, 2))
expected_matrix_large <- matrix(c(0, 0, 1, 1,
0, 0, 0, 1,
0, 1, 0, 1,
0, 0, 0, 0), nrow = 4, byrow = TRUE)
result_matrix_large <- comparisons_to_matrix(4, comparisons_large)
expect_equal(result_matrix_large, t(expected_matrix_large))
# Unit tests for comparisons_to_matrix function
test_that("comparisons_to_matrix constructs correct win matrix", {
# Test case 1: Basic functionality
comparisons <- data.frame("winner" = c(1, 3, 2, 2), "loser" = c(3, 1, 1, 3))
expected_matrix <- matrix(c(0, 1, 1,
0, 0, 0,
1, 1, 0), nrow = 3, byrow = TRUE)
result_matrix <- comparisons_to_matrix(3, comparisons)
expect_equal(result_matrix, expected_matrix)
# Test case 2: No comparisons
comparisons_empty <- data.frame("winner" = numeric(0), "loser" = numeric(0))
expected_matrix_empty <- matrix(0, 3, 3)
result_matrix_empty <- comparisons_to_matrix(3, comparisons_empty)
expect_equal(result_matrix_empty, expected_matrix_empty)
# Test case 3: Single comparison
comparisons_single <- data.frame("winner" = c(2), "loser" = c(1))
expected_matrix_single <- matrix(c(0, 1, 0,
0, 0, 0,
0, 0, 0), nrow = 3, byrow = TRUE)
result_matrix_single <- comparisons_to_matrix(3, comparisons_single)
expect_equal(result_matrix_single, expected_matrix_single)
})
# Unit tests for comparisons_to_matrix function
test_that("comparisons_to_matrix constructs correct win matrix", {
# Test case 1: Basic functionality
comparisons <- data.frame("winner" = c(1, 3, 2, 2), "loser" = c(3, 1, 1, 3))
expected_matrix <- matrix(c(0, 1, 1,
0, 0, 0,
1, 1, 0), nrow = 3, byrow = TRUE)
result_matrix <- comparisons_to_matrix(3, comparisons)
expect_equal(result_matrix, expected_matrix)
# Test case 2: No comparisons
comparisons_empty <- data.frame("winner" = numeric(0), "loser" = numeric(0))
expected_matrix_empty <- matrix(0, 3, 3)
result_matrix_empty <- comparisons_to_matrix(3, comparisons_empty)
expect_equal(result_matrix_empty, expected_matrix_empty)
# Test case 3: Single comparison
comparisons_single <- data.frame("winner" = c(2), "loser" = c(1))
expected_matrix_single <- matrix(c(0, 1, 0,
0, 0, 0,
0, 0, 0), nrow = 3, byrow = TRUE)
result_matrix_single <- comparisons_to_matrix(3, comparisons_single)
expect_equal(result_matrix_single, expected_matrix_single)
})
# Unit tests for construct.design.matrix function
test_that("construct.design.matrix constructs correct design matrix", {
# Test case 1: Design matrix with 2 objects
expected_matrix_2 <- sparseMatrix(i = c(1, 1),
j = c(1, 2),
x = c(1, -1),
dims = c(1, 2))
result_matrix_2 <- construct.design.matrix(2)
expect_equal(result_matrix_2, expected_matrix_2)
# Test case 2: Design matrix with 3 objects
expected_matrix_3 <- sparseMatrix(i = c(1, 1, 2, 2, 3, 3),
j = c(1, 2, 1, 3, 2, 3),
x = c(1, -1, 1, -1, 1, -1),
dims = c(3, 3))
result_matrix_3 <- construct.design.matrix(3)
expect_equal(result_matrix_3, expected_matrix_3)
# Test case 3: Design matrix with 4 objects
expected_matrix_4 <- sparseMatrix(i = c(1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6),
j = c(1, 2, 1, 3, 1, 4, 2, 3, 2, 4, 3, 4),
x = c(1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1),
dims = c(6, 4))
result_matrix_4 <- construct.design.matrix(4)
expect_equal(result_matrix_4, expected_matrix_4)
# Test case 4: Design matrix with 1 object (edge case)
expected_matrix_1 <- sparseMatrix(dims = c(0, 1))
result_matrix_1 <- construct.design.matrix(1)
expect_equal(result_matrix_1, expected_matrix_1)
})
# Test case 1: Design matrix with 2 objects
expected_matrix_2 <- sparseMatrix(i = c(1, 1),
j = c(1, 2),
x = c(1, -1),
dims = c(1, 2))
expected_matrix_2
# Test case 1: Design matrix with 2 objects
expected_matrix_2 <- sparseMatrix(i = c(1, 1),
j = c(1, 2),
x = c(1, -1),
dims = c(1, 2))
# Test case 1: Design matrix with 2 objects
expected_matrix <-  Matrix::sparseMatrix(i = c(1, 1),
j = c(1, 2),
x = c(1, -1),
dims = c(1, 2))
result_matrix <- construct.design.matrix(2)
expect_equal(result_matrix, expected_matrix)
expected_matrix
result_matrix
# Test case 2: Design matrix with 3 objects
expected_matrix_3 <- sparseMatrix(i = c(1, 1, 2, 2, 3, 3),
j = c(1, 2, 1, 3, 2, 3),
x = c(1, -1, 1, -1, 1, -1),
dims = c(3, 3))
# Test case 2: Design matrix with 3 objects
expected_matrix_3 <-  Matrix::sparseMatrix(i = c(1, 1, 2, 2, 3, 3),
j = c(1, 2, 1, 3, 2, 3),
x = c(1, -1, 1, -1, 1, -1),
dims = c(3, 3))
result_matrix_3 <- construct.design.matrix(3)
expect_equal(result_matrix_3, expected_matrix_3)
expected_matrix_3
# Test case 3: Design matrix with 4 objects
expected_matrix_4 <-  Matrix::sparseMatrix(i = c(1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6),
j = c(1, 2, 1, 3, 1, 4, 2, 3, 2, 4, 3, 4),
x = c(1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1),
dims = c(6, 4))
result_matrix_4 <- construct.design.matrix(4)
expect_equal(result_matrix_4, expected_matrix_4)
# Test case 4: Design matrix with 1 object (edge case)
expected_matrix_1 <- sparseMatrix(dims = c(0, 1))
result_matrix_1 <- construct.design.matrix(1)
# Test case 4: Design matrix with 1 object (edge case)
expected_matrix_1 <-  Matrix::sparseMatrix(dims = c(0, 1))
result_matrix_1 <- construct.design.matrix(1)
# Test case 1: Design matrix with 2 objects
expected_matrix_2 <- Matrix::sparseMatrix(i = c(1, 1, 2, 2),
j = c(1, 2, 2, 1),
x = c(1, -1, 1, -1),
dims = c(2, 2))
result_matrix_2 <- construct.design.matrix.both.ways(2)
expect_equal(result_matrix_2, expected_matrix_2)
expected_matrix_2
# Test case 2: Design matrix with 3 objects
expected_matrix_3 <- Matrix::sparseMatrix(i = c(1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6),
j = c(1, 2, 2, 1, 1, 3, 3, 1, 2, 3, 3, 2),
x = c(1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1),
dims = c(6, 3))
result_matrix_3 <- construct.design.matrix.both.ways(3)
expect_equal(result_matrix_3, expected_matrix_3)
expected_matrix_3
# Test case 3: Design matrix with 4 objects
expected_matrix_4 <- Matrix::sparseMatrix(i = c(1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12),
j = c(1, 2, 2, 1, 1, 3, 3, 1, 1, 4, 4, 1, 2, 3, 3, 2, 2, 4, 4, 2, 3, 4, 4, 3),
x = c(1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1),
dims = c(12, 4))
result_matrix_4 <- construct.design.matrix.both.ways(4)
expect_equal(result_matrix_4, expected_matrix_4)
# Test case 3: Design matrix with 4 objects
expected_matrix_4 <- Matrix::sparseMatrix(i = c(1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12),
j = c(1, 2, 2, 1, 1, 3, 3, 1, 1, 4, 4, 1, 2, 3, 3, 2, 2, 4, 4, 2, 3, 4, 4, 3),
x = c(1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1),
dims = c(12, 4))
result_matrix_4 <- construct.design.matrix.both.ways(4)
expect_equal(result_matrix_4, expected_matrix_4)
expected_matrix_4
construct.design.matrix.both.ways(4)
# Test case 1: Simple case with linear covariates
example.df <- data.frame("a" = c(1, 2, 3), "b" = c(2, 3, 1))
example.formula <- ~ a + b
player1 <- c(1, 3, 2)
player2 <- c(3, 1, 1)
expected_matrix <- matrix(c(-2,  1,
1, -2,
-1,  1), ncol = 2, byrow = TRUE)
result_matrix <- construct.generalised.design.matrix(player1, player2, example.formula, example.df)
expect_equal(result_matrix, expected_matrix)
expected_matrix
result_matrix
example.df
player1
result_matrix
formula.model <- stats::model.frame(example.formula, example.df)
formula.model
formula.model[player1, ]
formula.model[player2, ]
formula.model[player1, ] - formula.model[player2, ]
as.matrix(formula.model[player1, ] - formula.model[player2, ])
expected_matrix <- matrix(c(-2,  1,
2, -1,
1,  1), ncol = 2, byrow = TRUE)
result_matrix <- construct.generalised.design.matrix(player1, player2, example.formula, example.df)
expect_equal(result_matrix, expected_matrix)
# Test case 1: Simple case with linear covariates
example.df <- data.frame("a" = c(1, 2, 3), "b" = c(2, 3, 1))
example.formula <- ~ a + b
player1 <- c(1, 3, 2)
player2 <- c(3, 1, 1)
expected_matrix <- matrix(c(-2,  1,
2, -1,
1,  1), ncol = 2, byrow = TRUE)
result_matrix <- construct.generalised.design.matrix(player1, player2, example.formula, example.df)
expect_equal(result_matrix, expected_matrix)
expected_matrix <- matrix(c(-2,  1,
2, -1,
1,  1), ncol = 2, byrow = TRUE)
result_matrix <- construct.generalised.design.matrix(player1, player2, example.formula, example.df)
result_matrix
exp()
expected_matrix
typeof(result_matrix)
typeof(expected_matrix)
X <- matrix(formula.model[player1, ] - formula.model[player2, ])
X
X <- as.matrix(formula.model[player1, ] - formula.model[player2, ])
X
dim(X)
dim(expected_matrix)
example.df <- data.frame("a" = c(1, 2, 3), "b" = c(2, 3, 1))
example.formula <- ~ a + b
player1 <- c(1, 3, 2)
player2 <- c(3, 1, 1)
expected_matrix <- matrix(c(-2,  1,
2, -1,
1,  1), ncol = 2, byrow = TRUE)
result_matrix <- construct.generalised.design.matrix(player1, player2, example.formula, example.df)
expect_equal(result_matrix, expected_matrix)
# Test case 1: Simple case with linear covariates
example.df <- data.frame("a" = c(1, 2, 3), "b" = c(2, 3, 1))
example.formula <- ~ a + b
player1 <- c(1, 3, 2)
player2 <- c(3, 1, 1)
expected_matrix <- matrix(c(-2,  1,
2, -1,
1,  1), ncol = 2, byrow = TRUE)
result_matrix <- construct.generalised.design.matrix(player1, player2, example.formula, example.df)
expect_equal(result_matrix, expected_matrix)
?as.matrix
is.matrix(result_matrix)
?expect_equal
result_matrix
expected_matrix
dimnames(expected_matrix)
dimnames(expected_matrix) <- c(a, b)
dimnames(expected_matrix) <- c('a', 'b')
dimnames(expected_matrix) <- list("a", "b")
?list
?matrix
dimnames(expected_matrix) <- list(c("a", "b"), NULL)
dimnames(expected_matrix) <- list(NULL, c("a", "b"))
expect_equal(result_matrix, expected_matrix)
dimnames(result_matrix)
dimnames(expected_matrix)
dimnames(expected_matrix) <- list(c(1, 2, 3), c("a", "b"))
expect_equal(result_matrix, expected_matrix)
#' example.formula <- ~  a + b + I(a^2)
#'
#' #Generate comparisons of three players
#' player1 <- c(1, 3, 2, 1)
#' player2 <- c(3, 1, 1, 2)
#' X <- construct.generalised.design.matrix(player1, player2, example.formula, example.df)
#'
#' @keywords internal
#'
#' @export
construct.generalised.design.matrix <- function(player1, player2, formula, data){
#Get data frame from formula
formula.model <- stats::model.frame(formula, data)
n.objects <- dim(data)[1]
K <- length(player1)
all.pairs  <- t(utils::combn(n.objects, 2))
X <- as.matrix(formula.model[player1, ] - formula.model[player2, ])
dimnames(X) <- c(NULL, NULL)
return(X)
}
# Test case 1: Simple case with linear covariates
example.df <- data.frame("a" = c(1, 2, 3), "b" = c(2, 3, 1))
example.formula <- ~ a + b
player1 <- c(1, 3, 2)
player2 <- c(3, 1, 1)
expected_matrix <- matrix(c(-2,  1,
2, -1,
1,  1), ncol = 2, byrow = TRUE)
result_matrix <- construct.generalised.design.matrix(player1, player2, example.formula, example.df)
expect_equal(result_matrix, expected_matrix)
# Test case 2: Including a quadratic term
example.df <- data.frame("a" = c(1, 2, 3), "b" = c(2, 3, 1))
example.formula <- ~ a + b + I(a^2)
player1 <- c(1, 3)
player2 <- c(3, 2)
expected_matrix <- matrix(c(-8,  1, -4,
1, -2, -5), ncol = 3, byrow = TRUE)
result_matrix <- construct.generalised.design.matrix(player1, player2, example.formula, example.df)
expect_equal(result_matrix, expected_matrix)
expected_matrix
result_matrix
expected_matrix <- matrix(c(-2, 1, -8
1, -2, 5), ncol = 3, byrow = TRUE)
expected_matrix <- matrix(c(-2, 1, -8,
1, -2, 5), ncol = 3, byrow = TRUE)
result_matrix <- construct.generalised.design.matrix(player1, player2, example.formula, example.df)
expect_equal(result_matrix, expected_matrix)
# Test case 3: Edge case with a single comparison
example.df <- data.frame("a" = c(1, 2), "b" = c(2, 3))
example.formula <- ~ a
player1 <- c(1)
player2 <- c(2)
expected_matrix <- matrix(c(-1), ncol = 1)
result_matrix <- construct.generalised.design.matrix(player1, player2, example.formula, example.df)
expect_equal(result_matrix, expected_matrix)
# Test case 4: Multiple comparisons with identical players
example.df <- data.frame("a" = c(1, 1, 1), "b" = c(2, 2, 2))
example.formula <- ~ a + b
player1 <- c(1, 2, 3)
player2 <- c(2, 3, 1)
expected_matrix <- matrix(c(0, 0,
0, 0,
0, 0), ncol = 2, byrow = TRUE)
result_matrix <- construct.generalised.design.matrix(player1, player2, example.formula, example.df)
expect_equal(result_matrix, expected_matrix)
# Test case 5: Non-linear terms and interactions
example.df <- data.frame("a" = c(1, 2, 3), "b" = c(2, 3, 1))
example.formula <- ~ a * b
player1 <- c(1, 2)
player2 <- c(3, 1)
expected_matrix <- matrix(c(-8, 1, -5, -2, 3, 3), ncol = 3, byrow = TRUE)
result_matrix <- construct.generalised.design.matrix(player1, player2, example.formula, example.df)
expect_equal(result_matrix, expected_matrix)
# Unit tests for construct.design.matrix.by.comparison function
test_that("construct.design.matrix.by.comparison constructs correct design matrix", {
# Test case 1: Simple case with 3 objects and 4 comparisons
object1 <- c(1, 3, 2, 1)
object2 <- c(3, 1, 1, 2)
expected_matrix <- sparseMatrix(i = c(1, 1, 2, 2, 3, 3, 4, 4),
j = c(1, 3, 3, 1, 2, 1, 1, 2),
x = c(1, -1, 1, -1, 1, -1, 1, -1),
dims = c(4, 3))
result_matrix <- construct.design.matrix.by.comparison(object1, object2)
expect_equal(result_matrix, expected_matrix)
# Test case 2: Case with repeated comparisons
object1 <- c(2, 2, 3, 3)
object2 <- c(1, 1, 1, 1)
expected_matrix <- sparseMatrix(i = c(1, 1, 2, 2, 3, 3, 4, 4),
j = c(2, 1, 2, 1, 3, 1, 3, 1),
x = c(1, -1, 1, -1, 1, -1, 1, -1),
dims = c(4, 3))
result_matrix <- construct.design.matrix.by.comparison(object1, object2)
expect_equal(result_matrix, expected_matrix)
# Test case 3: Edge case with a single comparison
object1 <- c(1)
object2 <- c(2)
expected_matrix <- sparseMatrix(i = c(1, 1),
j = c(1, 2),
x = c(1, -1),
dims = c(1, 2))
result_matrix <- construct.design.matrix.by.comparison(object1, object2)
expect_equal(result_matrix, expected_matrix)
# Test case 4: Case with identical objects in comparison (should yield a row of zeros)
object1 <- c(1, 2, 3)
object2 <- c(1, 2, 3)
expected_matrix <- sparseMatrix(i = c(1, 2, 3),
j = c(1, 2, 3),
x = c(0, 0, 0),
dims = c(3, 3))
result_matrix <- construct.design.matrix.by.comparison(object1, object2)
expect_equal(result_matrix, expected_matrix)
# Test case 5: Case with more than 3 objects
object1 <- c(1, 4, 3, 2)
object2 <- c(4, 1, 2, 3)
expected_matrix <- sparseMatrix(i = c(1, 1, 2, 2, 3, 3, 4, 4),
j = c(1, 4, 4, 1, 3, 2, 2, 3),
x = c(1, -1, 1, -1, 1, -1, 1, -1),
dims = c(4, 4))
result_matrix <- construct.design.matrix.by.comparison(object1, object2)
expect_equal(result_matrix, expected_matrix)
})
# Test case 1: Simple case with 3 objects and 4 comparisons
object1 <- c(1, 3, 2, 1)
object2 <- c(3, 1, 1, 2)
expected_matrix <- sparseMatrix(i = c(1, 1, 2, 2, 3, 3, 4, 4),
j = c(1, 3, 3, 1, 2, 1, 1, 2),
x = c(1, -1, 1, -1, 1, -1, 1, -1),
dims = c(4, 3))
# Unit tests for construct.design.matrix.by.comparison function
test_that("construct.design.matrix.by.comparison constructs correct design matrix", {
# Test case 1: Simple case with 3 objects and 4 comparisons
object1 <- c(1, 3, 2, 1)
object2 <- c(3, 1, 1, 2)
expected_matrix <- Matrix::sparseMatrix(i = c(1, 1, 2, 2, 3, 3, 4, 4),
j = c(1, 3, 3, 1, 2, 1, 1, 2),
x = c(1, -1, 1, -1, 1, -1, 1, -1),
dims = c(4, 3))
result_matrix <- construct.design.matrix.by.comparison(object1, object2)
expect_equal(result_matrix, expected_matrix)
# Test case 2: Case with repeated comparisons
object1 <- c(2, 2, 3, 3)
object2 <- c(1, 1, 1, 1)
expected_matrix <- Matrix::sparseMatrix(i = c(1, 1, 2, 2, 3, 3, 4, 4),
j = c(2, 1, 2, 1, 3, 1, 3, 1),
x = c(1, -1, 1, -1, 1, -1, 1, -1),
dims = c(4, 3))
result_matrix <- construct.design.matrix.by.comparison(object1, object2)
expect_equal(result_matrix, expected_matrix)
# Test case 3: Edge case with a single comparison
object1 <- c(1)
object2 <- c(2)
expected_matrix <- Matrix::sparseMatrix(i = c(1, 1),
j = c(1, 2),
x = c(1, -1),
dims = c(1, 2))
result_matrix <- construct.design.matrix.by.comparison(object1, object2)
expect_equal(result_matrix, expected_matrix)
# Test case 4: Case with identical objects in comparison (should yield a row of zeros)
object1 <- c(1, 2, 3)
object2 <- c(1, 2, 3)
expected_matrix <- Matrix::sparseMatrix(i = c(1, 2, 3),
j = c(1, 2, 3),
x = c(0, 0, 0),
dims = c(3, 3))
result_matrix <- construct.design.matrix.by.comparison(object1, object2)
expect_equal(result_matrix, expected_matrix)
# Test case 5: Case with more than 3 objects
object1 <- c(1, 4, 3, 2)
object2 <- c(4, 1, 2, 3)
expected_matrix <- Matrix::sparseMatrix(i = c(1, 1, 2, 2, 3, 3, 4, 4),
j = c(1, 4, 4, 1, 3, 2, 2, 3),
x = c(1, -1, 1, -1, 1, -1, 1, -1),
dims = c(4, 4))
result_matrix <- construct.design.matrix.by.comparison(object1, object2)
expect_equal(result_matrix, expected_matrix)
})
# Unit tests for construct.design.matrix.both.ways function
test_that("construct.design.matrix.both.ways constructs correct design matrix", {
# Test case 1: Design matrix with 2 objects
expected_matrix_2 <- Matrix::sparseMatrix(i = c(1, 1, 2, 2),
j = c(1, 2, 2, 1),
x = c(1, -1, 1, -1),
dims = c(2, 2))
result_matrix_2 <- construct.design.matrix.both.ways(2)
expect_equal(result_matrix_2, expected_matrix_2)
# Test case 2: Design matrix with 3 objects
expected_matrix_3 <- Matrix::sparseMatrix(i = c(1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6),
j = c(1, 2, 2, 1, 1, 3, 3, 1, 2, 3, 3, 2),
x = c(1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1),
dims = c(6, 3))
result_matrix_3 <- construct.design.matrix.both.ways(3)
expect_equal(result_matrix_3, expected_matrix_3)
})
# Test case 1: Design matrix with 2 objects
expected_matrix_2 <- Matrix::sparseMatrix(i = c(1, 1, 2, 2),
j = c(1, 2, 2, 1),
x = c(1, -1, 1, -1),
dims = c(2, 2))
result_matrix_2 <- construct.design.matrix.both.ways(2)
expect_equal(result_matrix_2, expected_matrix_2)
# Test case 2: Design matrix with 3 objects
expected_matrix_3 <- Matrix::sparseMatrix(i = c(1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6),
j = c(1, 2, 2, 1, 1, 3, 3, 1, 2, 3, 3, 2),
x = c(1, -1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1),
dims = c(6, 3))
result_matrix_3 <- construct.design.matrix.both.ways(3)
expect_equal(result_matrix_3, expected_matrix_3)
expected_matrix_3
result_matrix_3
usethis::use_github_action_check_standard()
usethis::use_github_action()
citation("BayesLogit")
